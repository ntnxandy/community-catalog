name: Process Renovate PR

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  process-renovate-pr:
    if: github.event.pull_request.user.login == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract info from PR title
        id: extract
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          COMPONENT=$(echo "$PR_TITLE" | sed -n 's/.*release \(.*\) to .*/\1/p')
          VERSION=$(echo "$PR_TITLE" | awk '{print $NF}' | sed 's/^v//')
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run update script
        run: |
          echo "Upgrading ${{ steps.extract.outputs.component }} to version ${{ steps.extract.outputs.version }}"
          cd services/${{ steps.extract.outputs.component }} || exit 1
          
          # Get current version info
          current_folder=$(ls -d */ | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          current_version=$(echo "$current_folder" | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          new_version=${{ steps.extract.outputs.version }}
          
          # Skip if versions match
          if [ "$current_version" == "$new_version" ]; then
              echo "New version is same as current version"
              exit 0
          fi

          # Create folder
          cd ..
          current_folder_path="${current_folder%/}"
          new_folder_name="${current_folder_path/$current_version/$new_version}"
          
          if [ -d "$current_folder_path" ]; then
              cp -a "$current_folder_path" "$new_folder_name"
          fi

          # Define YAML paths to update
          declare -A yaml_updates=(
              ["helmrelease.yaml"]="spec.chart.spec.version"
              ["helmrelease.yaml"]="spec.valuesFrom[0].name"
              ["defaults/cm.yaml"]="metadata.name"
          )
          
          # Update files
          cd ${new_folder} || exit 1
          for file_path in "${!yaml_updates[@]}"; do
              yaml_path="${yaml_updates[$file_path]}"
              
              if [ -f "$file_path" ]; then
                  current_value=$(yq eval ".$yaml_path" "$file_path")
                  
                  if [ $? -eq 0 ] && [ ! -z "$current_value" ]; then
                      new_value="${current_value/$current_version/$new_version}"
                      yq eval ".$yaml_path = \"$new_value\"" -i "$file_path"
                  fi
              fi
          done
          


      - name: Commit and push changes
        run: |
          git config --local user.email "NKP-catalog[bot]@users.noreply.github.com"
          git config --local user.name "NKP Catalog Bot"
          git add -A
          git commit -m "chore: upgrade all items to version ${{ steps.extract.outputs.version }}"
          git push

      - name: Add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['catalog-ready']
            })
          